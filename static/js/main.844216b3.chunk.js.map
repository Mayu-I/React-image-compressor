{"version":3,"sources":["components/ImageCompressor.jsx","App.js","serviceWorker.js","index.js"],"names":["imageCompressor","handle","e","imageFile","target","files","setState","originalLink","URL","createObjectURL","originalImage","outputFileName","name","uploadImage","changeValue","value","click","preventDefault","output","options","maxSizeMB","maxWidthOrHeight","useWebWorker","state","size","alert","imageCompression","then","x","downloadLink","compressedLink","clicked","className","this","Card","Img","variant","src","type","accept","onChange","onClick","href","download","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0RAMqBA,E,kDACjB,aAAe,IAAD,8BACV,gBAUJC,OAAS,SAAAC,GACL,IAAMC,EAAYD,EAAEE,OAAOC,MAAM,GACjC,EAAKC,SAAS,CACVC,aAAcC,IAAIC,gBAAgBN,GAClCO,cAAeP,EACfQ,eAAgBR,EAAUS,KAC1BC,aAAa,KAjBP,EAqBdC,YAAc,SAAAZ,GACV,EAAKI,SAAL,eAAiBJ,EAAEE,OAAOQ,KAAOV,EAAEE,OAAOW,SAtBhC,EAyBdC,MAAQ,SAAAd,GACJA,EAAEe,iBAEF,IAWIC,EAXEC,EAAU,CACZC,UAAW,EACXC,iBAAkB,IAClBC,cAAc,GAGlB,OAAIH,EAAQC,WAAa,EAAKG,MAAMb,cAAcc,KAAO,MACrDC,MAAM,4CACC,IAIXC,YAAiB,EAAKH,MAAMb,cAAeS,GAASQ,MAAK,SAAAC,GACrDV,EAASU,EAET,IAAMC,EAAerB,IAAIC,gBAAgBS,GACzC,EAAKZ,SAAS,CACVwB,eAAgBD,OAIxB,EAAKvB,SAAS,CAAEyB,SAAS,IAClB,IAhDP,EAAKR,MAAQ,CACTO,eAAgB,qEAChBpB,cAAe,GACfH,aAAc,GACdwB,SAAS,EACTlB,aAAa,GAPP,E,qDAqDJ,IAAD,OACL,OACI,yBAAKmB,UAAU,8BACX,6DACA,yBAAKA,UAAU,YACX,yBAAKA,UAAU,yCACX,+CACCC,KAAKV,MAAMV,YACR,kBAACqB,EAAA,EAAKC,IAAN,CACIH,UAAU,KACVI,QAAQ,MACRC,IAAKJ,KAAKV,MAAMhB,eAGhB,kBAAC2B,EAAA,EAAKC,IAAN,CACIH,UAAU,KACVI,QAAQ,MACRC,IAAI,uEAGhB,yBAAKL,UAAU,iCACX,2BACIM,KAAK,OACLC,OAAO,UACPP,UAAU,yBACVQ,SAAU,SAAAtC,GAAC,OAAI,EAAKD,OAAOC,QAIvC,yBAAK8B,UAAU,+FACX,wBAAIA,UAAU,WAAd,wBACA,6BACCC,KAAKV,MAAMZ,eACR,4BACI2B,KAAK,SACLN,UAAU,eACVS,QAAS,SAAAvC,GAAC,OAAI,EAAKc,MAAMd,KAH7B,YAQI,sCAIZ,yBAAK8B,UAAU,yCACX,0DACA,kBAACE,EAAA,EAAKC,IAAN,CAAUC,QAAQ,MAAMC,IAAKJ,KAAKV,MAAMO,iBACvCG,KAAKV,MAAMQ,QACR,yBAAKC,UAAU,iCACX,uBACIU,KAAMT,KAAKV,MAAMO,eACjBa,SAAUV,KAAKV,MAAMZ,eACrBqB,UAAU,0BAHd,aASA,4C,GAjHaY,IAAMC,WCCpCC,EAHH,kBAAM,kBAAC,EAAD,OCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.844216b3.chunk.js","sourcesContent":["import React from \"react\";\n\nimport imageCompression from \"browser-image-compression\";\n\nimport Card from \"react-bootstrap/Card\";\n\nexport default class imageCompressor extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            compressedLink: \"http://navparivartan.in/wp-content/uploads/2018/11/placeholder.png\",\n            originalImage: \"\",\n            originalLink: \"\",\n            clicked: false,\n            uploadImage: false\n        };\n    }\n\n    handle = e => {\n        const imageFile = e.target.files[0];\n        this.setState({\n            originalLink: URL.createObjectURL(imageFile),\n            originalImage: imageFile,\n            outputFileName: imageFile.name,\n            uploadImage: true\n        });\n    };\n\n    changeValue = e => {\n        this.setState({ [e.target.name]: e.target.value });\n    };\n\n    click = e => {\n        e.preventDefault();\n\n        const options = {\n            maxSizeMB: 1,\n            maxWidthOrHeight: 500,\n            useWebWorker: true\n        };\n\n        if (options.maxSizeMB >= this.state.originalImage.size / 1024) {\n            alert(\"Image is too small, can't be Compressed!\");\n            return 0;\n        }\n\n        let output;\n        imageCompression(this.state.originalImage, options).then(x => {\n            output = x;\n\n            const downloadLink = URL.createObjectURL(output);\n            this.setState({\n                compressedLink: downloadLink\n            });\n        });\n\n        this.setState({ clicked: true });\n        return 1;\n    };\n\n    render() {\n        return (\n            <div className=\"m-5 text-light text-center\">\n                <h1>Image Compressor ðŸ“·</h1>\n                <div className=\"row mt-5\">\n                    <div className=\"col-xl-4 col-lg-4 col-md-12 col-sm-12\">\n                        <h3>1. Upload Image</h3>\n                        {this.state.uploadImage ? (\n                            <Card.Img\n                                className=\"ht\"\n                                variant=\"top\"\n                                src={this.state.originalLink}\n                            ></Card.Img>\n                        ) : (\n                                <Card.Img\n                                    className=\"ht\"\n                                    variant=\"top\"\n                                    src=\"http://navparivartan.in/wp-content/uploads/2018/11/placeholder.png\"\n                                ></Card.Img>\n                            )}\n                        <div className=\"d-flex justify-content-center\">\n                            <input\n                                type=\"file\"\n                                accept=\"image/*\"\n                                className=\"mt-2 btn btn-dark w-75\"\n                                onChange={e => this.handle(e)}\n                            ></input>\n                        </div>\n                    </div>\n                    <div className=\"col-xl-4 col-lg-4 col-md-12 mb-5 mt05 col-sm-12 justify-content-center align-items-baseline\">\n                        <h3 className=\"mt-5 ht\">2. Click on Compress</h3>\n                        <br />\n                        {this.state.outputFileName ? (\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-dark\"\n                                onClick={e => this.click(e)}\n                            >\n                                Compress\n                            </button>\n                        ) : (\n                                <></>\n                            )}\n                    </div>\n\n                    <div className=\"col-xl-4 col-lg-4 col-md-12 col-sm-12\">\n                        <h3>3. Download Compress Image</h3>\n                        <Card.Img variant=\"top\" src={this.state.compressedLink}></Card.Img>\n                        {this.state.clicked ? (\n                            <div className=\"d-flex justify-content-center\">\n                                <a\n                                    href={this.state.compressedLink}\n                                    download={this.state.outputFileName}\n                                    className=\"mt-2 btn btn-dark w-75\"\n                                >\n                                    Download\n                                </a>\n                            </div>\n                        ) : (\n                                <></>\n                            )}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import React from \"react\";\n\nimport ImageCompressor from \"./components/ImageCompressor\";\n\nconst App = () => <ImageCompressor />;\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}